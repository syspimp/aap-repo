#!/bin/bash -x
# this is the firstboot script
# it will set up the hostname, networking
# and call back to Ansible Tower/Platform

while getopts "dr" OPTION
do
  case "$OPTION" in
    # debug
    d) set -x
    ;;
    r) rm -rf /var/log/firstboot
    ;;
  esac
done

main()
{
  # code goes here
  # configuration management loop
  if [ -e /var/log/firstboot/.success ]
  then
     echo "*** firstboot.sh already run"
     echo "*** firstboot.sh delete /var/log/firstboot to run again"
     exit 0
  fi

  mkdir -p /var/log/firstboot

  # ubuntu networking
  if [[ -e /etc/os-release ]]
  then
    source /etc/os-release
    if [[ "${NAME}" == "Ubuntu" ]]
    then
      growpart /dev/sda 1
      resize2fs /dev/sda1
      if [[ ! -e /etc/netplan/99_config.yaml ]]
      then
        cat >/etc/netplan/99_config.yaml<<EOF
network:
  version: 2
  renderer: networkd
  ethernets:
    ens192:
      dhcp4: true
EOF
      fi
      sleep 2
      netplan apply
      ip link set dev ens192 up
      sleep 5
      apt-get install -y openssh-server open-vm-tools jq
      ssh-keygen -A
      systemctl enable ssh
      ufw allow ssh
      systemctl start ssh
    fi
  fi
  # rhel networking
  if [[ -e /etc/redhat-release ]]
  then
    growpart /dev/sda 3
    xfs_growfs /dev/sda3
    if [[ ! -e '/etc/sysconfig/network-scripts/ifcfg-eth0' ]]
    then
      cat > /etc/sysconfig/network-scripts/ifcfg-eth0 <<-EFF
        BOOTPROTO=dhcp
        DEVICE=eth0
        ONBOOT=yes
        TYPE=Ethernet
        USERCTL=no
        DNS1=10.55.102.5
        DNS2=10.55.110.1
EFF
    fi
    grep DNS /etc/sysconfig/network-scripts/ifcfg-eth0 > /dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
      echo "DNS1=10.55.102.5" >> /etc/sysconfig/network-scripts/ifcfg-eth0
      echo "DNS2=10.55.110.1" >> /etc/sysconfig/network-scripts/ifcfg-eth0
    fi
    systemctl daemon-reload
    nmcli con load /etc/sysconfig/network-scripts/ifcfg-eth0
    systemctl restart NetworkManager
    dnf install -y jq open-vm-tools
  fi
  # fedora networking
  if [[ -e /etc/fedora-release ]]
  then
    growpart /dev/sda 3
    xfs_growfs /dev/sda3
    grep DNS /etc/sysconfig/network-scripts/ifcfg-eth0 > /dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
      echo "DNS1=10.55.102.5" >> /etc/sysconfig/network-scripts/ifcfg-eth0
      echo "DNS2=10.55.110.1" >> /etc/sysconfig/network-scripts/ifcfg-eth0
    fi
    systemctl daemon-reload
    nmcli con load /etc/sysconfig/network-scripts/ifcfg-eth0
    systemctl restart NetworkManager
    dnf install -y jq open-vm-tools
  fi

  # wait for the network to wake up
  while ! ping -c 1 -W 2 8.8.8.8 > /dev/null
  do
    sleep 5
  done

  newhostname=""
  # wait until vmtoolsd returns a hostname
  while [[ "XX${newhostname}XX" == "XXXX" ]]
  do
    newhostname=$(/usr/bin/vmware-rpctool "info-get guestinfo.hostname")
    sleep 10
  done

  # set hostname and make sure it takes
  hostnamectl set-hostname ${newhostname}
  if [[ $? != 0 ]]
  then
    sleep 5
    hostname -b ${newhostname}
    echo ${newhostname} > /etc/hostname
  fi
  systemctl restart NetworkManager

  # wait until vmtoolsd returns a role
  while [[ "XX${newrole}XX" == "XXXX" ]]
  do
    newrole=$(/usr/bin/vmware-rpctool "info-get guestinfo.role")
    sleep 10
  done

  # wait until vmtoolsd returns a secondary role
  while [[ "XX${newsecrole}XX" == "XXXX" ]]
  do
    newsecrole=$(/usr/bin/vmware-rpctool "info-get guestinfo.secondaryrole")
    sleep 10
  done

  # wait until vmtoolsd returns a secondary role
  while [[ "XX${ans_cloud}XX" == "XXXX" ]]
  do
    ans_cloud=$(/usr/bin/vmware-rpctool "info-get guestinfo.cloud")
    sleep 10
  done

  # wait until vmtoolsd returns a secondary role
  while [[ "XX${ans_sdlc}XX" == "XXXX" ]]
  do
    ans_sdlc=$(/usr/bin/vmware-rpctool "info-get guestinfo.sdlc")
    sleep 10
  done

  # standardize our fact variable
  mkdir -p  /etc/ansible/facts.d
  cat > /etc/ansible/facts.d/roles.fact <<EOF
[default]
role=${newrole}
[secondary]
role=${newsecrole}
[environment]
cloud=${ans_cloud}
sdlc=${ans_sdlc}
EOF

  # wait for sshd to start
  while ! pidof sshd > /dev/null
  do
    sleep 5
  done

  # wait until tower/aws returns a success message
  while [[ ! -e /var/log/firstboot/.success ]]
  do
    curl -s -k --data 'host_config_key={{ aap_host_config_key }}' {{ aap_callback_url }} | \
    grep msg || \
    touch /var/log/firstboot/.success
    sleep 10
  done
}

main
exit 0


