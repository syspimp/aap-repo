#!/bin/bash -x

while getopts "dr" OPTION
do
  case "$OPTION" in
    # debug
    d) set -x
    ;;
    r) rm -rf /var/log/firstboot
    ;;
  esac
done

main()
{
  # code goes here
  growpart /dev/sda 3
  xfs_growfs /dev/sda3
  # configuration management loop
  if [ -e /var/log/firstboot/.success ]
  then
     echo "*** firstboot.sh already run"
     echo "*** firstboot.sh delete /var/log/firstboot to run again"
     exit 0
  fi

  mkdir -p /var/log/firstboot

  # ubuntu networking
  if [[ -e /etc/os-release ]]
  then
    if [[ ! -e /etc/netplan/99_config.yaml ]]
    then
      cat >/etc/netplan/99_config.yaml<<EOF
network:
  version: 2
  renderer: networkd
  ethernets:
    ens192:
      dhcp4: true
EOF
    fi
    sleep 2
    netplan apply
    ip link set dev ens192 up
    sleep 5
    apt-get install -y openssh-release open-vm-tools jq
    ssh-keygen -A
    systemctl enable ssh
    ufw allow ssh
    systemctl start ssh
  fi
  # rhel networking
  if [[ -e /etc/redhat-release ]]
  then
    grep DNS /etc/sysconfig/network-scripts/ifcfg-eth0 > /dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
      echo "DNS1=10.55.102.5" >> /etc/sysconfig/network-scripts/ifcfg-eth0
      echo "DNS2=10.55.110.1" >> /etc/sysconfig/network-scripts/ifcfg-eth0
    fi
    systemctl daemon-reload
    nmcli con load /etc/sysconfig/network-scripts/ifcfg-eth0
    systemctl restart NetworkManager
    dnf install -y jq open-vm-tools
  fi
  # fedora networking
  if [[ -e /etc/redhat-release ]]
  then
    grep DNS /etc/sysconfig/network-scripts/ifcfg-eth0 > /dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
      echo "DNS1=10.55.102.5" >> /etc/sysconfig/network-scripts/ifcfg-eth0
      echo "DNS2=10.55.110.1" >> /etc/sysconfig/network-scripts/ifcfg-eth0
    fi
    systemctl daemon-reload
    nmcli con load /etc/sysconfig/network-scripts/ifcfg-eth0
    systemctl restart NetworkManager
    dnf install -y jq open-vm-tools
  fi

  # wait for the network to wake up
  while ! ping -c 1 -W 2 8.8.8.8 > /dev/null
  do
    sleep 5
  done

  newhostname=""
  # wait until vmtoolsd returns a hostname
  while [[ "XX${newhostname}XX" == "XXXX" ]]
  do
    newhostname=$(/usr/bin/vmware-rpctool "info-get guestinfo.hostname")
    sleep 10
  done

  # wait until vmtoolsd returns a role
  while [[ "XX${newrole}XX" == "XXXX" ]]
  do
    newrole=$(/usr/bin/vmware-rpctool "info-get guestinfo.role")
    sleep 10
  done

  # wait until vmtoolsd returns a secondary role
  while [[ "XX${newsecrole}XX" == "XXXX" ]]
  do
    newsecrole=$(/usr/bin/vmware-rpctool "info-get guestinfo.secondaryrole")
    sleep 10
  done

  # standardize our fact variable
  mkdir -p  /etc/ansible/facts.d
  cat > /etc/ansible/facts.d/roles.fact <<EOF
[default]
role=${newrole}
[secondary]
role=${newsecrole}
EOF

  # wait until tower/aws returns a success message
  while [[ ! -e /var/log/firstboot/.success ]]
  do
    curl -s -k --data 'host_config_key={{ aap_host_config_key }}' {{ aap_callback_url }} | \
    grep msg || \
    touch /var/log/firstboot/.success
    sleep 10
  done
}

main
exit 0


