  - name: "Check if image file exists in playbook dir"
    stat:
      path: "{{ playbook_dir }}/{{ images[selected_os].input }}"
    register: playimage

  - name: "copy {{ images[selected_os].input }} to /tmp"
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/{{ images[selected_os].input }}"
      dest: "/tmp/{{ images[selected_os].input }}"
      owner: root
      group: root
      mode: '0644'
    when: playimage.stat.exists == true

  - name: "Check if image file exists in /tmp"
    stat:
      path: "/tmp/{{ images[selected_os].input }}"
      get_checksum: yes
    register: diskimage

  - name: wrapper for download
    block:
    - name: "save {{ images[selected_os].input }} to disk if doesn't exist or checksum doesn't match"
      uri:
        url: "{{ images[selected_os].url }}"
        method: GET
        dest: "/tmp/{{ images[selected_os].input }}"
        status_code: [304,200]
    when: 
      - ( diskimage.stat.exists == false ) or ( ( diskimage.stat.exists == true ) and ( diskimage.stat.checksum != images[selected_os].chksum ) )

    rescue:
    - name: "Download Block Wrapper completed"
      debug: msg="Well that didn't work"
        
  - name: "preflight checks"
    block:
    - name: "[preflight] check if libguestfs-tools is installed"
      shell: rpm -qa | grep libguestfs-tools

    rescue:
      - name: "You need to install thelibguestfs-tools rpm. Ctrl-C to stop, or wait to continue"
        debug:
          msg: "Run 'sudo dnf -y install libguestfs-tools' to install the needed tools"
      - name: "Please wait 10 secs"
        pause:
          seconds: 10
      - name: "installing libguestfs-tools"
        yum:
          name: libguestfs-tools
          state: present
        become: yes

  - name: "Delete custom working custom image"
    shell: |
      rm -f /tmp/{{ images[selected_os].input }}.custom
    args:
      executable: /bin/bash
    register: filename

  - name: "builder: working from backup of image {{ images[selected_os].input }}"
    ansible.builtin.copy:
      src: "/tmp/{{ images[selected_os].input }}"
      dest: "/tmp/{{ images[selected_os].input }}.custom"
      backup: no
      remote_src: yes

  - name: "builder: Copy in the scripts"
    ansible.builtin.template:
      src: "{{ item }}.j2"
      dest: "/tmp/{{ item }}"
      owner: root
      group: root
      mode: '0744'
    become: yes
    loop:
      - download.sh
      - firstboot.sh
      - "{{ SSHPUBKEY }}"

  - name: "builder: remove old vmdk if it exists"
    file:
      path: "/tmp/{{ images[selected_os].output }}.tmp.vmdk"
      state: absent

  - name: "builder: setting the root password"
    shell: |
      virt-customize -a /tmp/{{ images[selected_os].input }}.custom --root-password password:{{ ROOTPASS }}

  - name: "builder: customizing hostname"
    shell: |
      virt-customize -a /tmp/{{ images[selected_os].input }}.custom --hostname {{ images[selected_os].output }}

  - name: "builder: injecting ssh key"
    shell: |
      virt-customize -a /tmp/{{ images[selected_os].input }}.custom --ssh-inject root:file:/tmp/{{ SSHPUBKEY }}

  - name: "builder: adding scripts to /root"
    shell: |
      virt-customize -a /tmp/{{ images[selected_os].input }}.custom --copy-in /tmp/{{ item }}:/root
    loop: "{{ COPYIN }}"

  - name: "builder: adding growdisk script to firstboot"
    shell: |
      virt-customize -a /tmp/{{ images[selected_os].input }}.custom --firstboot /tmp/firstboot.sh

  - name: "builder: customizing add base"
    shell: |
      virt-customize -a /tmp/{{ images[selected_os].input }}.custom --run-command "apt-get install -y open-vm-tools"
    ignore_errors: yes

  - name: "builder: tell selinux to relabel next boot"
    shell: |
      virt-customize -a /tmp/{{ images[selected_os].input }}.custom --run-command "touch /.autorelabel"

  - name: "builder: running qemu-convert to vmdk"
    shell: |
      qemu-img convert /tmp/{{ images[selected_os].input }}.custom -O vmdk -o adapter_type=lsilogic,subformat=streamOptimized,compat6 /tmp/{{ images[selected_os].output }}.tmp.vmdk -p
    become: yes

  - name: "builder: copy to esxi hosts"
    shell: |
      scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i /root/.ssh/builder /tmp/{{ images[selected_os].output }}.tmp.vmdk root@{{ item }}:{{ VMWROOT }}/
    loop: "{{ ESXIHOSTS }}"

  - name: "builder: remove tmp vmdk"
    file:
      path: "/tmp/{{ images[selected_os].output }}.tmp.vmdk"
      state: absent

